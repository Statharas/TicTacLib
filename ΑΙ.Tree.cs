using System;
using System.Collections.Generic;

namespace TicTac
{
    public static partial class ΑΙ
    {
        public class Node
        {
            List<Node> Parents = new List<Node>();
            List<Node> Children = new List<Node>();
            static List<Node>[] Neighbor = new List<Node>[10]{new List<Node>(), new List<Node>(), new List<Node>(), new List<Node>(), new List<Node>(),
            new List<Node>(),new List<Node>(),new List<Node>(),new List<Node>(),new List<Node>()};
            int Value = 0;
            int Level = 0;
            Board.State Win = TicTac.Board.State.Empty;
            public Board.State[,] Board = new Board.State[3, 3];
            int ID = 0;
            static int cID = 1;
            static Node Root;

            internal Node( Board.State[,] State)
            {
                
                Board = State;

                ID = cID;
                cID++;
                //Console.WriteLine(ID);
                
            }
            public Node()
            {
                this.Board = new Board.State[3, 3] { { TicTac.Board.State.Empty, TicTac.Board.State.Empty, TicTac.Board.State.Empty },
                { TicTac.Board.State.Empty, TicTac.Board.State.Empty, TicTac.Board.State.Empty },
                { TicTac.Board.State.Empty, TicTac.Board.State.Empty, TicTac.Board.State.Empty }};
                GenerateChildren();
                Neighbor[Level].Add(this);
            }
            void GenerateChildren()
            {
                if (Win == TicTac.Board.State.Empty)
                {
                    int index = 0;
                    foreach (TicTac.Board.State a in Board)
                    {
                        //Console.WriteLine(this.ID);
                        //debug purposes
                       if (Level < 9)
                            if (a == TicTac.Board.State.Empty)
                            {
                                TicTac.Board.State[,] n = new Board.State[3, 3];
                                n = Board.Clone() as Board.State[,];
                                n[index / 3, index % 3] = GetPlayer(Level + 1);
                                //Console.WriteLine(index / 3 + "," + index % 3 + ", Index of " + index);
                                Node q = new Node( n);
                                q.Level = Level + 1;
                                //Console.WriteLine(q.Level);
                                bool exists = false;
                                foreach (Node f in Neighbor[q.Level])
                                {
                                    //Console.WriteLine("Checking on Level " + q.Level + " if "+ f.ID + " and " + q.ID + " are the same");
                                    if (f == q)
                                    {
                                        //Console.WriteLine("Skipping");
                                        f.Parents.Add(this);
                                        Children.Add(f);
                                        exists = true;
                                        break;
                                    }
                                }
                                if (!exists)
                                {
                                    //Console.WriteLine(q.ID+" Generated by "+ID+" on level "+q.Level);
                                    Children.Add(q);
                                    q.Parents.Add(this);

                                    Neighbor[q.Level].Add(q);
                                    q.Win = CheckForWins(q.Board);

                                    if (q.Win == TicTac.Board.State.P1)
                                        q.UpValue(1);
                                    if (q.Win == TicTac.Board.State.P2)
                                        q.UpValue(-1);
                                    q.GenerateChildren();
                                }
                                else {  q = null; }

                            }

                        index++;
                        //Console.WriteLine(index);
                    }
                }
                ;
            }

            private void UpValue(int a)
            {
                Value += a;
                foreach (Node q in Parents)
                {
                    q.UpValue(a);
                }
            }
            public void Rotate(int a)
            {
                for (int q = 0; q < a - 1; q++) { this.Rotate(1); } //Run this "a" times
                Board.State[,] Rotated = new Board.State[3, 3];
                /*Rotations go counter-clockwise
                 * 1 2 3
                 * 4 5 6
                 * 7 8 9
                 * to
                 * 3 6 9
                 * 2 5 8
                 * 1 4 7
                 * */
                Rotated[0, 0] = Board[0, 2];
                Rotated[0, 1] = Board[1, 2];
                Rotated[0, 2] = Board[2, 2];
                Rotated[1, 0] = Board[0, 1];
                Rotated[1, 1] = Board[1, 1];
                Rotated[1, 2] = Board[2, 1];
                Rotated[2, 0] = Board[0, 0];
                Rotated[2, 1] = Board[1, 0];
                Rotated[2, 2] = Board[2, 0];
                Board = Rotated;
            }
            public void Mirror(int a)
            {

                /*Rotations go counter-clockwise
                 *Mirrored view. 0 to 3 flip it. 
                 * */
                if (a == 0 || a == 2)
                {
                    Board.State[,] Mirrored = new Board.State[3, 3];
                    Mirrored[0, 0] = Board[2, 0];
                    Mirrored[0, 1] = Board[2, 1];
                    Mirrored[0, 2] = Board[2, 2];
                    Mirrored[2, 0] = Board[0, 0];
                    Mirrored[2, 1] = Board[0, 1];
                    Mirrored[2, 2] = Board[0, 2];

                    Mirrored[1, 0] = Board[1, 0];
                    Mirrored[1, 1] = Board[1, 1];
                    Mirrored[1, 2] = Board[1, 2];
                    Board = Mirrored;
                }

                if (a == 1 || a == 3)
                {
                    Board.State[,] Mirrored = new Board.State[3, 3];
                    Mirrored[0, 0] = Board[0, 2];
                    Mirrored[0, 2] = Board[0, 0];
                    Mirrored[1, 0] = Board[1, 2];
                    Mirrored[1, 2] = Board[1, 0];
                    Mirrored[2, 0] = Board[2, 2];
                    Mirrored[2, 2] = Board[2, 0];

                    Mirrored[0, 1] = Board[0, 1];
                    Mirrored[1, 1] = Board[1, 1];
                    Mirrored[2, 1] = Board[2, 1];
                    Board = Mirrored;
                }
                if (a > 3)
                    throw new InvalidOperationException("Cannot Mirror on 4");
            }
            public static bool operator ==(Node a, Node b)
            {
                TicTac.Board.State[,] d = b.Board.Clone() as Board.State[,];
                Node c = new Node(d);
                bool IsEqual = false;
                for (int x = 0; x < 4; x++)
                {
                    for (int y = 0; y < 4; y++)
                    {
                        if (!IsEqual)
                        {
                            bool isSame = true;
                            for (int q = 0; q < 3; q++)
                            {
                                for (int w = 0; w < 3; w++)
                                {
                                    if (a.Board[q, w] != c.Board[q, w])
                                        isSame = false;
                                }
                            }
                            if (isSame)
                                return true;
                        }
                        c.Mirror(y);
                    }
                    c.Rotate(1);
                }
                //Console.WriteLine(IsEqual);
                return IsEqual;
            }
            public static bool operator !=(Node a, Node b)
            {
                return !(a == b);
            }
            public static void GenerateTree()
            {
                Root = new Node();
                if (cID >= 400)
                    ;
            }
        }



        private static void FlipPlayer(Board.State Player)
        {
            if (Player == Board.State.P1)
                Player = Board.State.P2;
            else if (Player == Board.State.P2)
                Player = Board.State.P1;
        }
        public static Board.State GetPlayer(int a)
        {
            if (a % 2!= 0)
            {
                return Board.State.P1;

            }
            else return Board.State.P2;
        }


    }
}
